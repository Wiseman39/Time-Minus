package timeMinusMain;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.objects.NativeString.toLowerCase;

/**
 *
 * @author Justin ,Kieran
 */
public final class frmTimeMinus extends javax.swing.JFrame {
    private int timeTableID;
    DefaultTableModel sScheduleTableModel = new DefaultTableModel(); //create tableModel object to manipulate the schedule table

    DefaultTableModel mainEventsTableModel = new DefaultTableModel(); //create tableModel object to manipulate the main screen upcomming table

    DefaultTableModel sCalendarTableModel = new DefaultTableModel(); //create tableModel object to manipulate the calendar screen table

    DefaultTableModel mainNextClassTableModel = new DefaultTableModel();

    //DefaultTableModel navScreenTableModel = new DefaultTableModel();
    Calendar calendar = Calendar.getInstance(TimeZone.getDefault());//creates calendar object for functions requiring date information

    /**
     * Creates new form frmTimeMinus
     */
    public frmTimeMinus() {//Constructor
        initComponents();
        screen_login.setFocusable(true);//shows login screen by defual when program starts
        parentPanel.removeAll();
        parentPanel.add(screen_login);
        parentPanel.repaint();
        parentPanel.revalidate();

        main_calendarEvents.setShowGrid(true);
        sCalendar_calendarTable.setShowGrid(true);
        sSchedule_scheduleTable.setShowGrid(true);

        //DefaultTableCellRenderer scheduleRenderer = new DefaultTableCellRenderer();//create cell renderer to manipulate entry of code 
        //scheduleRenderer.setHorizontalAlignment(SwingConstants.CENTER);//centres code in cell
        //sSchedule_scheduleTable.getColumnModel().getColumn(0).setCellRenderer(scheduleRenderer);
        DBconnect(); // connects to the database
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        parentPanel = new javax.swing.JPanel();
        screen_login = new javax.swing.JPanel();
        login_detailsPanel = new javax.swing.JPanel();
        login_detailsHeader = new javax.swing.JLabel();
        login_username = new javax.swing.JTextField();
        login_RememberDetails = new javax.swing.JCheckBox();
        login_Button = new javax.swing.JButton();
        login_password = new javax.swing.JPasswordField();
        login_UserNameLabel = new javax.swing.JLabel();
        login_PasswordLabel = new javax.swing.JLabel();
        login_userTypeCombo = new javax.swing.JComboBox<>();
        login_UserTypeLabel = new javax.swing.JLabel();
        login_ExtraPanel = new javax.swing.JPanel();
        login_ForgottenLink = new javax.swing.JLabel();
        login_CookiesLink = new javax.swing.JLabel();
        login_AppName = new javax.swing.JLabel();
        login_Logo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Debug_DayOfWeek = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        Debug_Time = new javax.swing.JComboBox<>();
        login_Background = new javax.swing.JLabel();
        screen_sMain = new javax.swing.JPanel();
        main_BackButton = new javax.swing.JButton();
        main_WelcomeBackMessage = new javax.swing.JLabel();
        main_NavToClassButton = new javax.swing.JButton();
        main_CalendarScrollPane = new javax.swing.JScrollPane();
        main_calendarEvents = new javax.swing.JTable();
        main_CalendarButton = new javax.swing.JButton();
        main_NextClassesButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        sMain_nextClassTable = new javax.swing.JTable();
        screen_studentSchedule = new javax.swing.JPanel();
        sSchedule_Banner = new javax.swing.JPanel();
        sSchedule_BannerText = new javax.swing.JLabel();
        sSchedule_BackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        sSchedule_scheduleTable = new javax.swing.JTable();
        sSchedule_dayOfWeekCombo = new javax.swing.JComboBox<>();
        screen_sCalendar = new javax.swing.JPanel();
        sCalendar_Banner = new javax.swing.JPanel();
        sCalendar_BannerText = new javax.swing.JLabel();
        sCalendar_BackButton = new javax.swing.JButton();
        sCalendar_monthCombo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        sCalendar_calendarTable = new javax.swing.JTable();
        sCalendar_eventTypeCombo = new javax.swing.JComboBox<>();
        sCalendar_tableHeader = new javax.swing.JLabel();
        screen_ChatMenu = new javax.swing.JPanel();
        screen_ChatRoom = new javax.swing.JPanel();
        screen_navMenu = new javax.swing.JPanel();
        navMenu_Banner = new javax.swing.JPanel();
        navMenu_BannerText = new javax.swing.JLabel();
        navMenu_BackButton1 = new javax.swing.JButton();
        navMenu_startComboB = new javax.swing.JComboBox<>();
        navMenu_endComboB = new javax.swing.JComboBox<>();
        navMenu_startLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        screen_navDirections = new javax.swing.JPanel();
        sCalendar_Banner1 = new javax.swing.JPanel();
        navDirections_BannerText = new javax.swing.JLabel();
        sNavScreen_BackButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        navDirections_DirectionsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time-Minus");
        setBounds(new java.awt.Rectangle(750, 200, 0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(360, 640));

        parentPanel.setBackground(new java.awt.Color(255, 255, 255));
        parentPanel.setLayout(new java.awt.CardLayout());

        screen_login.setBackground(new java.awt.Color(0, 0, 255));
        screen_login.setLayout(null);

        login_detailsPanel.setBackground(new java.awt.Color(255, 255, 255));

        login_detailsHeader.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        login_detailsHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_detailsHeader.setText("Please enter your login details below:");

        login_username.setForeground(new java.awt.Color(0, 0, 0));
        login_username.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                login_usernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                login_usernameFocusLost(evt);
            }
        });
        login_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login_usernameActionPerformed(evt);
            }
        });

        login_RememberDetails.setText("Remember Me");

        login_Button.setBackground(new java.awt.Color(12, 89, 207));
        login_Button.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        login_Button.setForeground(new java.awt.Color(255, 255, 255));
        login_Button.setText("Log In");
        login_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                login_ButtonActionPerformed(evt);
            }
        });

        login_password.setForeground(new java.awt.Color(0, 0, 0));

        login_UserNameLabel.setText("Username / Student Email:");

        login_PasswordLabel.setText("Password:");

        login_userTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Lecturer" }));

        login_UserTypeLabel.setText("User Type:");

        javax.swing.GroupLayout login_detailsPanelLayout = new javax.swing.GroupLayout(login_detailsPanel);
        login_detailsPanel.setLayout(login_detailsPanelLayout);
        login_detailsPanelLayout.setHorizontalGroup(
            login_detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(login_detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(login_detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(login_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(login_detailsHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(login_username, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(login_password)
                    .addComponent(login_userTypeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(login_detailsPanelLayout.createSequentialGroup()
                        .addGroup(login_detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(login_RememberDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(login_UserNameLabel)
                            .addComponent(login_PasswordLabel)
                            .addComponent(login_UserTypeLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        login_detailsPanelLayout.setVerticalGroup(
            login_detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(login_detailsPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(login_detailsHeader)
                .addGap(14, 14, 14)
                .addComponent(login_UserTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login_userTypeCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login_UserNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login_username, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login_PasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login_password, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(login_RememberDetails)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(login_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        screen_login.add(login_detailsPanel);
        login_detailsPanel.setBounds(30, 110, 313, 350);

        login_ExtraPanel.setBackground(new java.awt.Color(255, 255, 255));

        login_ForgottenLink.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        login_ForgottenLink.setForeground(new java.awt.Color(20, 100, 246));
        login_ForgottenLink.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_ForgottenLink.setText("Forgotten username or Password");

        login_CookiesLink.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        login_CookiesLink.setForeground(new java.awt.Color(20, 100, 246));
        login_CookiesLink.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_CookiesLink.setText("Cookies must be enabled in your browser");

        javax.swing.GroupLayout login_ExtraPanelLayout = new javax.swing.GroupLayout(login_ExtraPanel);
        login_ExtraPanel.setLayout(login_ExtraPanelLayout);
        login_ExtraPanelLayout.setHorizontalGroup(
            login_ExtraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(login_ExtraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(login_ExtraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(login_ForgottenLink, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(login_CookiesLink, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                .addContainerGap())
        );
        login_ExtraPanelLayout.setVerticalGroup(
            login_ExtraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(login_ExtraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(login_ForgottenLink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(login_CookiesLink)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        screen_login.add(login_ExtraPanel);
        login_ExtraPanel.setBounds(0, 570, 360, 79);

        login_AppName.setBackground(new java.awt.Color(255, 255, 255));
        login_AppName.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        login_AppName.setForeground(new java.awt.Color(255, 255, 255));
        login_AppName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        login_AppName.setText("Time - Minus");
        screen_login.add(login_AppName);
        login_AppName.setBounds(0, 60, 354, 44);

        login_Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pearsonLogoResized.png"))); // NOI18N
        screen_login.add(login_Logo);
        login_Logo.setBounds(0, 0, 200, 60);

        Debug_DayOfWeek.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));

        jLabel1.setText("DebugControls: Day and time control");

        Debug_Time.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00:00", "08:30:00", "09:00:00", "09:30:00", "10:00:00", "10:30:00", "11:00:00", "11:30:00", "12:00:00", "12:30:00", "13:00:00", "13:30:00", "14:00:00", "14:30:00", "15:00:00", "15:30:00", "16:00:00", "16:30:00", "17:00:00", "17:30:00" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Debug_DayOfWeek, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 122, Short.MAX_VALUE))
                    .addComponent(Debug_Time, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Debug_DayOfWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Debug_Time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        screen_login.add(jPanel1);
        jPanel1.setBounds(10, 470, 340, 100);

        login_Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/loginBackgroundResized.jpg"))); // NOI18N
        screen_login.add(login_Background);
        login_Background.setBounds(0, 0, 360, 640);

        parentPanel.add(screen_login, "card2");

        screen_sMain.setBackground(new java.awt.Color(255, 255, 255));
        screen_sMain.setPreferredSize(new java.awt.Dimension(360, 640));

        main_BackButton.setBackground(new java.awt.Color(255, 255, 255));
        main_BackButton.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        main_BackButton.setText("<<");
        main_BackButton.setPreferredSize(new java.awt.Dimension(90, 40));
        main_BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_BackButtonActionPerformed(evt);
            }
        });

        main_WelcomeBackMessage.setBackground(new java.awt.Color(0, 0, 0));
        main_WelcomeBackMessage.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        main_WelcomeBackMessage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        main_WelcomeBackMessage.setText("Welcome Back USER_NAME USER_SURNAME");
        main_WelcomeBackMessage.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        main_NavToClassButton.setBackground(new java.awt.Color(2, 31, 84));
        main_NavToClassButton.setForeground(new java.awt.Color(255, 255, 255));
        main_NavToClassButton.setText("Navigate to Class");
        main_NavToClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_NavToClassButtonActionPerformed(evt);
            }
        });

        main_calendarEvents.setBackground(new java.awt.Color(2, 31, 84));
        main_calendarEvents.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        main_calendarEvents.setForeground(new java.awt.Color(255, 255, 255));
        main_calendarEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Upcomming Events"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        main_calendarEvents.setFocusable(false);
        main_calendarEvents.setGridColor(new java.awt.Color(255, 255, 255));
        main_calendarEvents.setIntercellSpacing(new java.awt.Dimension(1, 2));
        main_calendarEvents.setRowHeight(50);
        main_calendarEvents.setRowSelectionAllowed(false);
        main_CalendarScrollPane.setViewportView(main_calendarEvents);

        main_CalendarButton.setBackground(new java.awt.Color(2, 31, 84));
        main_CalendarButton.setForeground(new java.awt.Color(255, 255, 255));
        main_CalendarButton.setText("Open Calendar View");
        main_CalendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_CalendarButtonActionPerformed(evt);
            }
        });

        main_NextClassesButton.setBackground(new java.awt.Color(2, 31, 84));
        main_NextClassesButton.setForeground(new java.awt.Color(255, 255, 255));
        main_NextClassesButton.setText("Schedule >");
        main_NextClassesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                main_NextClassesButtonActionPerformed(evt);
            }
        });

        sMain_nextClassTable.setBackground(new java.awt.Color(2, 31, 84));
        sMain_nextClassTable.setForeground(new java.awt.Color(255, 255, 255));
        sMain_nextClassTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        sMain_nextClassTable.setRowHeight(117);
        jScrollPane3.setViewportView(sMain_nextClassTable);

        javax.swing.GroupLayout screen_sMainLayout = new javax.swing.GroupLayout(screen_sMain);
        screen_sMain.setLayout(screen_sMainLayout);
        screen_sMainLayout.setHorizontalGroup(
            screen_sMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screen_sMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(screen_sMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(main_CalendarScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, screen_sMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(main_WelcomeBackMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(main_CalendarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(screen_sMainLayout.createSequentialGroup()
                        .addComponent(main_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(screen_sMainLayout.createSequentialGroup()
                        .addComponent(main_NavToClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(main_NextClassesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        screen_sMainLayout.setVerticalGroup(
            screen_sMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screen_sMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(main_WelcomeBackMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(screen_sMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(main_NavToClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(main_NextClassesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(main_CalendarScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(main_CalendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(main_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        parentPanel.add(screen_sMain, "card3");

        screen_studentSchedule.setBackground(new java.awt.Color(255, 255, 255));
        screen_studentSchedule.setMaximumSize(new java.awt.Dimension(360, 640));

        sSchedule_Banner.setBackground(new java.awt.Color(2, 31, 84));

        sSchedule_BannerText.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        sSchedule_BannerText.setForeground(new java.awt.Color(255, 255, 255));
        sSchedule_BannerText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sSchedule_BannerText.setText("Your Schedule for the day");

        javax.swing.GroupLayout sSchedule_BannerLayout = new javax.swing.GroupLayout(sSchedule_Banner);
        sSchedule_Banner.setLayout(sSchedule_BannerLayout);
        sSchedule_BannerLayout.setHorizontalGroup(
            sSchedule_BannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sSchedule_BannerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sSchedule_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        sSchedule_BannerLayout.setVerticalGroup(
            sSchedule_BannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sSchedule_BannerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sSchedule_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );

        sSchedule_BackButton.setBackground(new java.awt.Color(255, 255, 255));
        sSchedule_BackButton.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        sSchedule_BackButton.setText("<<");
        sSchedule_BackButton.setPreferredSize(new java.awt.Dimension(90, 40));
        sSchedule_BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sSchedule_BackButtonActionPerformed(evt);
            }
        });

        sSchedule_scheduleTable.setBackground(new java.awt.Color(2, 31, 84));
        sSchedule_scheduleTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sSchedule_scheduleTable.setForeground(new java.awt.Color(255, 255, 255));
        sSchedule_scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ));
        sSchedule_scheduleTable.setGridColor(new java.awt.Color(255, 255, 255));
        sSchedule_scheduleTable.setRowHeight(100);
        sSchedule_scheduleTable.setRowSelectionAllowed(false);
        sSchedule_scheduleTable.setTableHeader(null);
        jScrollPane1.setViewportView(sSchedule_scheduleTable);

        sSchedule_dayOfWeekCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" }));
        sSchedule_dayOfWeekCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sSchedule_dayOfWeekComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout screen_studentScheduleLayout = new javax.swing.GroupLayout(screen_studentSchedule);
        screen_studentSchedule.setLayout(screen_studentScheduleLayout);
        screen_studentScheduleLayout.setHorizontalGroup(
            screen_studentScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sSchedule_Banner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(screen_studentScheduleLayout.createSequentialGroup()
                .addComponent(sSchedule_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(screen_studentScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sSchedule_dayOfWeekCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        screen_studentScheduleLayout.setVerticalGroup(
            screen_studentScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screen_studentScheduleLayout.createSequentialGroup()
                .addComponent(sSchedule_Banner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sSchedule_dayOfWeekCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sSchedule_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        parentPanel.add(screen_studentSchedule, "card4");

        screen_sCalendar.setBackground(new java.awt.Color(255, 255, 255));

        sCalendar_Banner.setBackground(new java.awt.Color(2, 31, 84));

        sCalendar_BannerText.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        sCalendar_BannerText.setForeground(new java.awt.Color(255, 255, 255));
        sCalendar_BannerText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sCalendar_BannerText.setText("Student Calendar");

        javax.swing.GroupLayout sCalendar_BannerLayout = new javax.swing.GroupLayout(sCalendar_Banner);
        sCalendar_Banner.setLayout(sCalendar_BannerLayout);
        sCalendar_BannerLayout.setHorizontalGroup(
            sCalendar_BannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sCalendar_BannerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sCalendar_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        sCalendar_BannerLayout.setVerticalGroup(
            sCalendar_BannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sCalendar_BannerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sCalendar_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );

        sCalendar_BackButton.setBackground(new java.awt.Color(255, 255, 255));
        sCalendar_BackButton.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        sCalendar_BackButton.setText("<<");
        sCalendar_BackButton.setPreferredSize(new java.awt.Dimension(90, 40));
        sCalendar_BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sCalendar_BackButtonActionPerformed(evt);
            }
        });

        sCalendar_monthCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        sCalendar_monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sCalendar_monthComboActionPerformed(evt);
            }
        });

        sCalendar_calendarTable.setBackground(new java.awt.Color(2, 31, 84));
        sCalendar_calendarTable.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sCalendar_calendarTable.setForeground(new java.awt.Color(255, 255, 255));
        sCalendar_calendarTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ));
        sCalendar_calendarTable.setGridColor(new java.awt.Color(255, 255, 255));
        sCalendar_calendarTable.setRowHeight(125);
        sCalendar_calendarTable.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(sCalendar_calendarTable);

        sCalendar_eventTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Assessment", "Event", " " }));
        sCalendar_eventTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sCalendar_eventTypeComboActionPerformed(evt);
            }
        });

        sCalendar_tableHeader.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        sCalendar_tableHeader.setForeground(new java.awt.Color(0, 0, 0));
        sCalendar_tableHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sCalendar_tableHeader.setText("Assessments and Activities");

        javax.swing.GroupLayout screen_sCalendarLayout = new javax.swing.GroupLayout(screen_sCalendar);
        screen_sCalendar.setLayout(screen_sCalendarLayout);
        screen_sCalendarLayout.setHorizontalGroup(
            screen_sCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sCalendar_Banner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(screen_sCalendarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(screen_sCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sCalendar_tableHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(sCalendar_monthCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sCalendar_eventTypeCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(screen_sCalendarLayout.createSequentialGroup()
                .addComponent(sCalendar_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        screen_sCalendarLayout.setVerticalGroup(
            screen_sCalendarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screen_sCalendarLayout.createSequentialGroup()
                .addComponent(sCalendar_Banner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sCalendar_monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sCalendar_eventTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sCalendar_tableHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sCalendar_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        parentPanel.add(screen_sCalendar, "card9");

        screen_ChatMenu.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout screen_ChatMenuLayout = new javax.swing.GroupLayout(screen_ChatMenu);
        screen_ChatMenu.setLayout(screen_ChatMenuLayout);
        screen_ChatMenuLayout.setHorizontalGroup(
            screen_ChatMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        screen_ChatMenuLayout.setVerticalGroup(
            screen_ChatMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        parentPanel.add(screen_ChatMenu, "card5");

        screen_ChatRoom.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout screen_ChatRoomLayout = new javax.swing.GroupLayout(screen_ChatRoom);
        screen_ChatRoom.setLayout(screen_ChatRoomLayout);
        screen_ChatRoomLayout.setHorizontalGroup(
            screen_ChatRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        screen_ChatRoomLayout.setVerticalGroup(
            screen_ChatRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        parentPanel.add(screen_ChatRoom, "card6");

        screen_navMenu.setBackground(new java.awt.Color(255, 255, 255));

        navMenu_Banner.setBackground(new java.awt.Color(2, 31, 84));

        navMenu_BannerText.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        navMenu_BannerText.setForeground(new java.awt.Color(255, 255, 255));
        navMenu_BannerText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navMenu_BannerText.setText("Navigate to a venue");

        javax.swing.GroupLayout navMenu_BannerLayout = new javax.swing.GroupLayout(navMenu_Banner);
        navMenu_Banner.setLayout(navMenu_BannerLayout);
        navMenu_BannerLayout.setHorizontalGroup(
            navMenu_BannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navMenu_BannerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navMenu_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        navMenu_BannerLayout.setVerticalGroup(
            navMenu_BannerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navMenu_BannerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navMenu_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );

        navMenu_BackButton1.setBackground(new java.awt.Color(255, 255, 255));
        navMenu_BackButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        navMenu_BackButton1.setText("< Back");
        navMenu_BackButton1.setPreferredSize(new java.awt.Dimension(90, 40));
        navMenu_BackButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                navMenu_BackButton1ActionPerformed(evt);
            }
        });

        navMenu_startComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select your current location" }));

        navMenu_endComboB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select your desired venue" }));

        navMenu_startLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        navMenu_startLabel.setText("Start:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("End:");

        jButton1.setBackground(new java.awt.Color(2, 31, 84));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Show Directions");

        javax.swing.GroupLayout screen_navMenuLayout = new javax.swing.GroupLayout(screen_navMenu);
        screen_navMenu.setLayout(screen_navMenuLayout);
        screen_navMenuLayout.setHorizontalGroup(
            screen_navMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(navMenu_Banner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(screen_navMenuLayout.createSequentialGroup()
                .addComponent(navMenu_BackButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(screen_navMenuLayout.createSequentialGroup()
                .addGroup(screen_navMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(navMenu_startLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(screen_navMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(screen_navMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(navMenu_startComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(navMenu_endComboB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(screen_navMenuLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(screen_navMenuLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        screen_navMenuLayout.setVerticalGroup(
            screen_navMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screen_navMenuLayout.createSequentialGroup()
                .addComponent(navMenu_Banner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(navMenu_startLabel)
                .addGap(18, 18, 18)
                .addComponent(navMenu_startComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(navMenu_endComboB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                .addComponent(navMenu_BackButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        parentPanel.add(screen_navMenu, "card7");

        screen_navDirections.setBackground(new java.awt.Color(255, 255, 255));

        sCalendar_Banner1.setBackground(new java.awt.Color(2, 31, 84));

        navDirections_BannerText.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        navDirections_BannerText.setForeground(new java.awt.Color(255, 255, 255));
        navDirections_BannerText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navDirections_BannerText.setText("X000 to X001");

        javax.swing.GroupLayout sCalendar_Banner1Layout = new javax.swing.GroupLayout(sCalendar_Banner1);
        sCalendar_Banner1.setLayout(sCalendar_Banner1Layout);
        sCalendar_Banner1Layout.setHorizontalGroup(
            sCalendar_Banner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sCalendar_Banner1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navDirections_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        sCalendar_Banner1Layout.setVerticalGroup(
            sCalendar_Banner1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sCalendar_Banner1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navDirections_BannerText, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addContainerGap())
        );

        sNavScreen_BackButton.setBackground(new java.awt.Color(255, 255, 255));
        sNavScreen_BackButton.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        sNavScreen_BackButton.setText("<<");
        sNavScreen_BackButton.setPreferredSize(new java.awt.Dimension(90, 40));
        sNavScreen_BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sNavScreen_BackButtonActionPerformed(evt);
            }
        });

        navDirections_DirectionsTable.setBackground(new java.awt.Color(2, 31, 84));
        navDirections_DirectionsTable.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        navDirections_DirectionsTable.setForeground(new java.awt.Color(255, 255, 255));
        navDirections_DirectionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        navDirections_DirectionsTable.setGridColor(new java.awt.Color(255, 255, 255));
        navDirections_DirectionsTable.setRowHeight(160);
        jScrollPane4.setViewportView(navDirections_DirectionsTable);

        javax.swing.GroupLayout screen_navDirectionsLayout = new javax.swing.GroupLayout(screen_navDirections);
        screen_navDirections.setLayout(screen_navDirectionsLayout);
        screen_navDirectionsLayout.setHorizontalGroup(
            screen_navDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sCalendar_Banner1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(screen_navDirectionsLayout.createSequentialGroup()
                .addComponent(sNavScreen_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        screen_navDirectionsLayout.setVerticalGroup(
            screen_navDirectionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(screen_navDirectionsLayout.createSequentialGroup()
                .addComponent(sCalendar_Banner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sNavScreen_BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        parentPanel.add(screen_navDirections, "card8");

        getContentPane().add(parentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void login_usernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_login_usernameFocusGained
        /*if (login_username.getText().equals("Student ID / Pearson Email")) {        //code for showing text hints the login screentextboxes
            login_username.setText("");
            login_username.setForeground(Color.black);
        }*/
    }//GEN-LAST:event_login_usernameFocusGained

    private void login_usernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_login_usernameFocusLost
        /*if (login_username.getText().equals("")) {
            login_username.setText("Student ID / Pearson Email");
            login_username.setForeground(new Color(153, 153, 153));
        }*/
    }//GEN-LAST:event_login_usernameFocusLost

    public Connection con;
    public java.sql.Statement st;
    public ResultSet resSet;

    public ResultSet resSet2;

    public void DBconnect() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            System.out.println("Driver connected");
            String path = "jdbc:mysql://localhost:3307/timeminus";
            con = DriverManager.getConnection(path, "root", "");
            System.out.println("database connected");
            st = con.createStatement();

        } catch (Exception ex) {
            System.out.println("error" + ex);
        }

    }

    private void login_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login_ButtonActionPerformed

        //testingLoginBypass();// Bypasses login for easily testing GUI, MUST REMOVE

        
        //Actual Login with database
        String user = login_username.getText();
        String pass = login_password.getText();
        String userType = toLowerCase((String) login_userTypeCombo.getSelectedItem());
        try {
            
            //String query = "select * from students";
            String query = "SELECT * FROM " + userType;
            resSet = st.executeQuery(query);

            String username = null;
            String password = null;
            String name = null;
            String surname = null;
            boolean userFound = false;

            while (resSet.next()) {
                username = resSet.getString("StudentUserName");
                password = resSet.getString("StudentPassword");
                name = resSet.getString("StudentName");
                surname = resSet.getString("StudentSurname");
                timeTableID = resSet.getInt("timeTableID");
                if (user.equalsIgnoreCase(username) && pass.equalsIgnoreCase(password)) {

                    JOptionPane.showMessageDialog(null, "Hi " + name + " " + surname + " you have logged in successfully");
                    parentPanel.removeAll();
                    parentPanel.add(screen_sMain);
                    parentPanel.repaint();
                    parentPanel.revalidate();
                    if (!login_RememberDetails.isSelected()) {
                        /*login_password.setText("Password");
                        login_password.setForeground(new Color(153, 153, 153));
                        login_username.setText("Student ID / Pearson Email");
                        login_username.setForeground(new Color(153, 153, 153));*/
                        login_password.setText("");
                        login_username.setText("");

                    }
                    userFound = true;
                    main_WelcomeBackMessage.setText("Welcome Back " + name + " " + surname);
                    break;

                }

            }

            if (userFound == false) {

                /*login_password.setText("Password");
                login_password.setForeground(new Color(153, 153, 153));
                login_username.setText("Student ID / Pearson Email");
                login_username.setForeground(new Color(153, 153, 153));*/
                login_password.setText("");
                login_username.setText("");
                JOptionPane.showMessageDialog(parentPanel, "Incorrect Username or Password", "", JOptionPane.WARNING_MESSAGE);

            }

        } catch (Exception ex) {
            System.out.println(ex);

        }
        
        
        try {
            updateMainScreenCalendar(); //Updates main screen upcomming calendar when program starts.
            updateMainNextClass();
        } catch (SQLException ex) {
            Logger.getLogger(frmTimeMinus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_login_ButtonActionPerformed


    private void sSchedule_BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sSchedule_BackButtonActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_sMain);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_sSchedule_BackButtonActionPerformed

    private void navMenu_BackButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_navMenu_BackButton1ActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_sMain);
        parentPanel.repaint();
        parentPanel.revalidate();

        navMenu_startComboB.setSelectedIndex(0);
        navMenu_endComboB.setSelectedIndex(0);
    }//GEN-LAST:event_navMenu_BackButton1ActionPerformed

    private void sCalendar_BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sCalendar_BackButtonActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_sMain);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_sCalendar_BackButtonActionPerformed

    private void login_usernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_login_usernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_login_usernameActionPerformed

    private void sCalendar_monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sCalendar_monthComboActionPerformed
        updateCalendarScreen();
    }//GEN-LAST:event_sCalendar_monthComboActionPerformed

    private void sCalendar_eventTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sCalendar_eventTypeComboActionPerformed
        updateCalendarScreen();
    }//GEN-LAST:event_sCalendar_eventTypeComboActionPerformed

    private void sSchedule_dayOfWeekComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sSchedule_dayOfWeekComboActionPerformed
        updateStudentSchedule();
    }//GEN-LAST:event_sSchedule_dayOfWeekComboActionPerformed

    private void main_NextClassesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_NextClassesButtonActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_studentSchedule);
        parentPanel.repaint();
        parentPanel.revalidate();

        sSchedule_dayOfWeekCombo.setSelectedItem(getDayOfWeek());
        updateStudentSchedule();

    }//GEN-LAST:event_main_NextClassesButtonActionPerformed

    private void main_CalendarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_CalendarButtonActionPerformed

        parentPanel.removeAll();
        parentPanel.add(screen_sCalendar);
        parentPanel.repaint();
        parentPanel.revalidate();

        sCalendar_monthCombo.setSelectedItem(calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));
        sCalendar_eventTypeCombo.setSelectedItem("All");

        //updateCalendarScreen(); Apparently do not need this for the calendar screen to work?
    }//GEN-LAST:event_main_CalendarButtonActionPerformed

    private void main_BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_BackButtonActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_login);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_main_BackButtonActionPerformed

    private void sNavScreen_BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sNavScreen_BackButtonActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_sMain);
        parentPanel.repaint();
        parentPanel.revalidate();
    }//GEN-LAST:event_sNavScreen_BackButtonActionPerformed

    private void main_NavToClassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_main_NavToClassButtonActionPerformed
        parentPanel.removeAll();
        parentPanel.add(screen_navDirections);
        parentPanel.repaint();
        parentPanel.revalidate();

        try {
            navToNextClass();
        } catch (SQLException ex) {
            Logger.getLogger(frmTimeMinus.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_main_NavToClassButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmTimeMinus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmTimeMinus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmTimeMinus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmTimeMinus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmTimeMinus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Debug_DayOfWeek;
    private javax.swing.JComboBox<String> Debug_Time;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel login_AppName;
    private javax.swing.JLabel login_Background;
    private javax.swing.JButton login_Button;
    private javax.swing.JLabel login_CookiesLink;
    private javax.swing.JPanel login_ExtraPanel;
    private javax.swing.JLabel login_ForgottenLink;
    private javax.swing.JLabel login_Logo;
    private javax.swing.JLabel login_PasswordLabel;
    private javax.swing.JCheckBox login_RememberDetails;
    private javax.swing.JLabel login_UserNameLabel;
    private javax.swing.JLabel login_UserTypeLabel;
    private javax.swing.JLabel login_detailsHeader;
    private javax.swing.JPanel login_detailsPanel;
    private javax.swing.JPasswordField login_password;
    private javax.swing.JComboBox<String> login_userTypeCombo;
    private javax.swing.JTextField login_username;
    private javax.swing.JButton main_BackButton;
    private javax.swing.JButton main_CalendarButton;
    private javax.swing.JScrollPane main_CalendarScrollPane;
    private javax.swing.JButton main_NavToClassButton;
    private javax.swing.JButton main_NextClassesButton;
    private javax.swing.JLabel main_WelcomeBackMessage;
    private javax.swing.JTable main_calendarEvents;
    private javax.swing.JLabel navDirections_BannerText;
    private javax.swing.JTable navDirections_DirectionsTable;
    private javax.swing.JButton navMenu_BackButton1;
    private javax.swing.JPanel navMenu_Banner;
    private javax.swing.JLabel navMenu_BannerText;
    private javax.swing.JComboBox<String> navMenu_endComboB;
    private javax.swing.JComboBox<String> navMenu_startComboB;
    private javax.swing.JLabel navMenu_startLabel;
    private javax.swing.JPanel parentPanel;
    private javax.swing.JButton sCalendar_BackButton;
    private javax.swing.JPanel sCalendar_Banner;
    private javax.swing.JPanel sCalendar_Banner1;
    private javax.swing.JLabel sCalendar_BannerText;
    private javax.swing.JTable sCalendar_calendarTable;
    private javax.swing.JComboBox<String> sCalendar_eventTypeCombo;
    private javax.swing.JComboBox<String> sCalendar_monthCombo;
    private javax.swing.JLabel sCalendar_tableHeader;
    private javax.swing.JTable sMain_nextClassTable;
    private javax.swing.JButton sNavScreen_BackButton;
    private javax.swing.JButton sSchedule_BackButton;
    private javax.swing.JPanel sSchedule_Banner;
    private javax.swing.JLabel sSchedule_BannerText;
    private javax.swing.JComboBox<String> sSchedule_dayOfWeekCombo;
    private javax.swing.JTable sSchedule_scheduleTable;
    private javax.swing.JPanel screen_ChatMenu;
    private javax.swing.JPanel screen_ChatRoom;
    private javax.swing.JPanel screen_login;
    private javax.swing.JPanel screen_navDirections;
    private javax.swing.JPanel screen_navMenu;
    private javax.swing.JPanel screen_sCalendar;
    private javax.swing.JPanel screen_sMain;
    private javax.swing.JPanel screen_studentSchedule;
    // End of variables declaration//GEN-END:variables

    private void updateMainScreenCalendar() throws SQLException {

        int currentDay = calendar.get(Calendar.DATE);
        //int currentDay = 23;
        //System.out.println(currentDay);
        String currentMonth = calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault());
        main_calendarEvents.setModel(mainEventsTableModel);
        mainEventsTableModel.setColumnCount(0);

        if (mainEventsTableModel.getRowCount() > 0) {//removes any previous rows from the JTable
            for (int i = mainEventsTableModel.getRowCount() - 1; i > -1; i--) {
                mainEventsTableModel.removeRow(i);
            }
        }
        mainEventsTableModel.addColumn("Upcomming Assessments and Events");

        String query = "SELECT DateDay, DateMonth, EventDesc, EventType FROM eventstable WHERE DateDay >= " + currentDay + " AND DateMonth = '" + currentMonth + "' LIMIT 5";

        resSet = st.executeQuery(query);
        if (!resSet.next()) {
            calendar.add(Calendar.MONTH, 1);
            currentMonth = calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault());
            query = "SELECT DateDay, DateMonth, EventDesc, EventType FROM eventstable WHERE DateMonth = '" + currentMonth + "' LIMIT 5";
            resSet = st.executeQuery(query);
            while (resSet.next()) {
                mainEventsTableModel.insertRow(mainEventsTableModel.getRowCount(), new Object[]{resSet.getString(1) + " " + resSet.getString(2) + ": " + resSet.getString(3) + " " + resSet.getString(4)});
            }
        } else {
            resSet.beforeFirst();
            while (resSet.next()) {
                mainEventsTableModel.insertRow(mainEventsTableModel.getRowCount(), new Object[]{resSet.getString(1) + " " + resSet.getString(2) + ": " + resSet.getString(3) + " " + resSet.getString(4)});
            }
        }

        while (resSet.next()) {
            mainEventsTableModel.insertRow(mainEventsTableModel.getRowCount(), new Object[]{resSet.getString(1) + " " + resSet.getString(2) + ": " + resSet.getString(3) + " " + resSet.getString(4)});
        }

    }

    private void testingLoginBypass() {//used to bypass login for validating GUI layout. MUST REMOVE
        parentPanel.removeAll();
        parentPanel.add(screen_sMain);
        parentPanel.repaint();
        parentPanel.revalidate();
        timeTableID = 1;
    }

    private void updateCalendarScreen() {

        String query;
        sCalendar_calendarTable.setModel(sCalendarTableModel);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();//create cell renderer to manipulate entry of code

        renderer.setHorizontalAlignment(SwingConstants.CENTER);//centres code in cell

        sCalendarTableModel.setColumnCount(0);

        if (sCalendarTableModel.getRowCount() > 0) {//removes any previous rows from the JTable
            for (int i = sCalendarTableModel.getRowCount() - 1; i > -1; i--) {
                sCalendarTableModel.removeRow(i);
            }
        }

        sCalendarTableModel.addColumn(sCalendar_monthCombo.getSelectedItem());
        sCalendar_calendarTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
        
        if (sCalendar_eventTypeCombo.getSelectedItem() != "All") {
            query = "SELECT DateDay, DateMonth, DateYear, EventDesc, EventType, Time, EventVenue FROM eventstable WHERE DateMonth = '" + sCalendar_monthCombo.getSelectedItem() + "' AND EventType = '" + sCalendar_eventTypeCombo.getSelectedItem() + "'";
        } else {
            query = "SELECT DateDay, DateMonth, DateYear ,EventDesc, EventType, Time, EventVenue FROM eventstable WHERE DateMonth = '" + sCalendar_monthCombo.getSelectedItem() + "'";
        }

        try {
            resSet = st.executeQuery(query);

            if (!resSet.next()) {
                sCalendarTableModel.insertRow(sCalendarTableModel.getRowCount(), new Object[]{"<html><div style=\"text-align:center\">There are no events / assessments in " + sCalendar_monthCombo.getSelectedItem() + "</div></html>"});
            } else {
                resSet.beforeFirst();

                while (resSet.next()) {
                    String day = resSet.getString(1);
                    String month = resSet.getString(2);
                    String year = resSet.getString(3);
                    String desc = resSet.getString(4);
                    String type = resSet.getString(5);
                    String time = resSet.getString(6);
                    String venue = resSet.getString(7);
                    
                    sCalendarTableModel.insertRow(sCalendarTableModel.getRowCount(), new Object[]{"<html><div style=\"text-align:center\"><b>Date: " + day + " " + month + " " + year + ": </b>"
                        + "<br>Time: <i>" + time
                        + "</i><br>" + type
                        + "<br>Description: " + desc 
                        + "<br>Venue: " + venue + "</div></html>"});
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(frmTimeMinus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateStudentSchedule() {
        //show schedule for student:

        //String dayOfWeek = "Thursday";
        //System.out.println(dayOfWeek);
        String query;
        sSchedule_scheduleTable.setModel(sScheduleTableModel);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();//create cell renderer to manipulate entry of code

        renderer.setHorizontalAlignment(SwingConstants.CENTER);//centres code in cell

        sScheduleTableModel.setColumnCount(0);

        if (sScheduleTableModel.getRowCount() > 0) {//removes any previous rows from the JTable
            for (int i = sScheduleTableModel.getRowCount() - 1; i > -1; i--) {
                sScheduleTableModel.removeRow(i);
            }
        }

        sScheduleTableModel.addColumn("");// no need for a column name if header is removed
        sSchedule_scheduleTable.getColumnModel().getColumn(0).setCellRenderer(renderer);

        //query = "SELECT SubjectName, SubjectCode, Venue, StartTime, EndTime FROM timetableyear1 WHERE Day = '" + sSchedule_dayOfWeekCombo.getSelectedItem() + "'"; // Older database query
        query = "SELECT ModuleName, ModuleCode, ModuleVenue, ModuleStart, ModuleEnd FROM module WHERE ModuleDay =  '" + sSchedule_dayOfWeekCombo.getSelectedItem() + "' and module.TimeTableID = " + timeTableID;
        try {

            resSet = st.executeQuery(query);

            if (!resSet.next()) {
                sScheduleTableModel.insertRow(sScheduleTableModel.getRowCount(), new Object[]{"<html><div style=\"text-align:center\"><b>You have no classes on " + sSchedule_dayOfWeekCombo.getSelectedItem() + ", YAY!</b></div></html>"});
            } else {
                resSet.beforeFirst();
                while (resSet.next()) {
                    String SubjectName = resSet.getString(1);
                    String SubjectCode = resSet.getString(2);
                    String Venue = resSet.getString(3);
                    String StartTime = resSet.getString(4);
                    String EndTime = resSet.getString(5);

                    sScheduleTableModel.insertRow(sScheduleTableModel.getRowCount(), new Object[]{"<html><div style=\"text-align:center\"><b> " + SubjectName + ": </b>"
                        + "<br>Subject Code: " + SubjectCode
                        + "<br>Venue Number: " + Venue
                        + "<br>Duration: " + StartTime.substring(0, 5) + " — " + EndTime.substring(0, 5) + "</div></html>"});
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(frmTimeMinus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateMainNextClass() {
        //String currentDay = calendar.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.getDefault());
        String currentDay = getDayOfWeek();
        
        
        String currentTime = getCurrentTime();
        System.out.println(currentTime);
        
        String query;
        sMain_nextClassTable.setModel(mainNextClassTableModel);
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();//create cell renderer to manipulate entry of code

        renderer.setHorizontalAlignment(SwingConstants.CENTER);//centres code in cell

        mainNextClassTableModel.setColumnCount(0);

        if (mainNextClassTableModel.getRowCount() > 0) {//removes any previous rows from the JTable
            for (int i = mainNextClassTableModel.getRowCount() - 1; i > -1; i--) {
                mainNextClassTableModel.removeRow(i);
            }
        }

        mainNextClassTableModel.addColumn("Your next class:");
        sMain_nextClassTable.getColumnModel().getColumn(0).setCellRenderer(renderer);

        if ((currentDay.equalsIgnoreCase("Saturday")) || (currentDay.equalsIgnoreCase("Sunday"))) {
            currentDay = "Monday";
            currentTime = "00:00:01";
        }

        //query = "SELECT SubjectName, SubjectCode, Venue, StartTime, EndTime FROM timetableyear1 WHERE Day = '" + currentDay + "' AND EndTime >= '" + currentTime + "' LIMIT 1"; //Uses old database
        query = "SELECT ModuleName, ModuleCode, ModuleVenue, ModuleStart, ModuleEnd FROM module WHERE ModuleDay = '" + currentDay + "' AND ModuleEnd >= '" + currentTime + "' AND module.TimeTableID = " + timeTableID + " LIMIT 1";

        try {

            resSet = st.executeQuery(query);

            if (!resSet.next()) {
                mainNextClassTableModel.insertRow(mainNextClassTableModel.getRowCount(), new Object[]{"<html><div style=\"text-align:center\"><b>You have no classes on " + getDayOfWeek() + ", YAY!</b></div></html>"});
            } else {
                resSet.beforeFirst();
                while (resSet.next()) {
                    String SubjectName = resSet.getString(1);
                    String SubjectCode = resSet.getString(2);
                    String Venue = resSet.getString(3);
                    String StartTime = resSet.getString(4);
                    String EndTime = resSet.getString(5);

                    mainNextClassTableModel.insertRow(mainNextClassTableModel.getRowCount(), new Object[]{"<html><div style=\"text-align:center\"><b> " + SubjectName + ": </b>"
                        + "<br>Subject Code: " + SubjectCode
                        + "<br>Venue Number: " + Venue
                        + "<br>Duration: " + StartTime.substring(0, 5) + " — " + EndTime.substring(0, 5) + "</div></html>"});
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(frmTimeMinus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void navToNextClass() throws SQLException {

        int i = 1;
        String query;
        ImageIcon image;
        
        
        String currentTime = getCurrentTime();
        String currentDay = getDayOfWeek();

        //if ((currentDay.equalsIgnoreCase("Saturday")) || (currentDay.equalsIgnoreCase("Sunday"))) {
       //    currentDay = "Monday";
        //    currentTime = "08:00:00";
        //}

        
        query = "SELECT LessonNo, PrevLessonNo, ModuleVenue FROM module WHERE ModuleDay = '" + currentDay + "' AND ModuleEnd >= '" + currentTime + "' AND module.TimeTableID = " + timeTableID + " LIMIT 1";
        resSet = st.executeQuery(query);    //if the result set is empty, I.E. no next class for the day, a warning message will be displayed and user is left on the main screen
        if (!resSet.next()) {
            parentPanel.removeAll();
            parentPanel.add(screen_sMain);
            parentPanel.repaint();
            parentPanel.revalidate();
            JOptionPane.showMessageDialog(parentPanel, "You have no more classes for the rest of the day", "", JOptionPane.WARNING_MESSAGE);

        } else {
            resSet.first();
            String lessonNo = resSet.getString(1);
            String prevLessonNo = resSet.getString(2);
            String venue = resSet.getString(3);
            String directionGroup = prevLessonNo + "to" + lessonNo;
            
            String imagePath = "/NavigationImages/" + directionGroup + "-";
            query = "SELECT DirectDesc FROM directions WHERE DirectionGroup = '" + directionGroup + "' AND TimeTableID = " + timeTableID + " ORDER BY DirectNo";
            resSet = st.executeQuery(query);

            DefaultTableModel navScreenTableModel = new DefaultTableModel() {
                @Override
                public Class getColumnClass(int column) {
                    if (column == 1) {
                        return javax.swing.ImageIcon.class;
                    } else {
                        return String.class;
                    }

                }
            };
            navScreenTableModel.setColumnCount(0);

            if (navScreenTableModel.getRowCount() > 0) {//removes any previous rows from the JTable
                for (int j = navScreenTableModel.getRowCount() - 1; j > -1; j--) {
                    navScreenTableModel.removeRow(j);
                }
            }

            navScreenTableModel.addColumn("Directions");
            navScreenTableModel.addColumn("Guide Image");
            navDirections_DirectionsTable.setModel(navScreenTableModel);

            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();//create cell renderer to manipulate entry of code
            renderer.setHorizontalAlignment(SwingConstants.CENTER);//centres code in cell
            renderer.setVerticalAlignment(SwingConstants.TOP);
            navDirections_DirectionsTable.getColumnModel().getColumn(0).setCellRenderer(renderer);
            navDirections_DirectionsTable.setShowGrid(true);
            navDirections_BannerText.setText("Navigate to " + venue);
            while (resSet.next()) {

                image = new ImageIcon(getClass().getResource(imagePath + i + ".jpg"));
                i++;
                navScreenTableModel.insertRow(navScreenTableModel.getRowCount(), new Object[]{resSet.getString(1), image});
            }
        }

    }

    private String getDayOfWeek() {//returns the current day of the week for the main screen next class notification and is used for class navigation
        //return (calendar.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, Locale.getDefault())); //gets current day
        
        return (String) Debug_DayOfWeek.getSelectedItem();//use for testing and debuging MUST REMOVE
    }

    private String getCurrentTime() { //returns the current time for use by navigation and showing next class notification
        //DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss");
        //LocalDateTime now = LocalDateTime.now();
        //return (dtf.format(now));
        
        return (String) Debug_Time.getSelectedItem();//use for testing and Debugging MUST REMOVE
    }
/////////////
}
